"""
Pydantic models for the data structures used in the extraction pipeline.
"""
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from enum import Enum

class ExtractionStrategy(str, Enum):
    """
    Enum for the different extraction strategies available. These strategies
    are used by the `AsyncRouter` to create an extraction plan.
    """
    MINIMAL = "minimal"
    BASIC = "basic"
    COMPREHENSIVE = "comprehensive"
    TABLE_FOCUS = "table_focus"
    TABLE_CHUNK = "table_chunk"
    TEXT_ONLY = "text_only"
    VISUAL_ONLY = "visual_only"

class ExtractionPlan(BaseModel):
    """
    Represents a single step in the extraction plan for a page.
    
    Attributes:
        step: The sequence number of this step.
        description: A description of what this step is intended to extract.
        strategy: The `ExtractionStrategy` to be used for this step.
        max_tokens: The maximum number of tokens to allocate for this step.
        region: (Optional) A specific region of the page to focus on.
        special_instructions: (Optional) Any special instructions for the LLM.
        estimated_complexity: The estimated complexity of this step.
        split_info: (Optional) Information about chunking, if applicable.
    """
    step: int
    description: str
    strategy: ExtractionStrategy
    max_tokens: int = Field(..., ge=1000, le=50000)
    region: Optional[str] = None
    special_instructions: Optional[str] = None
    estimated_complexity: str = "moderate"
    split_info: Optional[Dict[str, Any]] = None

class RouterAnalysis(BaseModel):
    """
    The output of the `AsyncRouter`'s analysis of a page.
    
    Attributes:
        page_complexity: The overall complexity of the page.
        has_dense_table: Whether a dense table was detected.
        table_info: (Optional) Information about detected tables.
        text_sections: Information about the text sections on the page.
        visual_elements: Information about the visual elements on the page.
        extraction_plans: A list of `ExtractionPlan` steps for this page.
        total_estimated_tokens: The total estimated tokens for all steps.
        warnings: (Optional) Any warnings generated by the router.
    """
    page_complexity: str
    has_dense_table: bool
    table_info: Optional[Dict[str, Any]] = None
    text_sections: Dict[str, Any] = Field(default_factory=dict)
    visual_elements: Dict[str, Any] = Field(default_factory=dict)
    extraction_plans: List[ExtractionPlan]
    total_estimated_tokens: int
    warnings: List[str] = Field(default_factory=list)

class ExtractionResult(BaseModel):
    """
    The result of a single extraction step performed by the `AsyncExtractor`.
    
    Attributes:
        step: The step number corresponding to the `ExtractionPlan`.
        strategy: The strategy that was used.
        success: Whether the extraction was successful.
        content: (Optional) The extracted content as a dictionary.
        error: (Optional) An error message if the extraction failed.
        tokens_used: The number of tokens used for this step.
        time_elapsed: The time taken for this step in seconds.
        model_used: (Optional) The LLM that was used.
        is_fallback: Whether a fallback model was used.
    """
    step: int
    strategy: str
    success: bool
    content: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    tokens_used: int = 0
    time_elapsed: float = 0.0
    model_used: Optional[str] = None
    is_fallback: bool = False
